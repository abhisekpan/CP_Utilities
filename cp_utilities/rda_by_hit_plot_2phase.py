#! /usr/bin/env python
"""Plots reuse distance signatures for each interval, grouped by hit status.

NAME
    rda_by_hit_plot_2phase.py

SYNOPSYS
    ./rda_by_hit_plot_2phase.py benchmark input_file num_threads offset
    quantum_size first_preferred_thread

DESCRIPTION
    Given the reuse-distance signatures for each interval for a benchmark,
    divides the intervals for each thread into 2 phases - corresponding to
    whether that thread was preferred or unpreferred in each interval and plots
    the reuse distance signatures for each phase. Outputs one file per thread.
    The total frequency for any distance is grouped by the status of hit/miss
    generated by the accesses.
 
OPTIONS
    benchmark
        Benchmark name

    input_file
        Input file containing reuse-distance signatures per interval. This has
        to be the output of the reuse distance tool, using Pin or simics.

    num_threads
        Number of threads

    offset
        Offset after which partitioning started while this profile was
        collected.

    quantum_size
        Size of intervals each quantum in round robin partitioning.

    first_preferred_thread
        The thread which was given preference in the first quantum.
                       
EXAMPLES
    ./rda_by_hit_plot_2phase.py blackscholes
    inter_rda_blackscholes_large_4_5mil.out 4 1 23 2

NOTES

AUTHOR
    Abhisek Pan, pana@purdue.edu

LICENSE
    Copyright (C) 2012  Abhisek Pan, Purdue University. All rights reserved.

    This file is distributed under the University of Illinois/NCSA Open Source
    License. 
    You can obtain a soft copy of the license either by visiting
    http://otm.illinois.edu/uiuc_openSource, or by mailing pana@purdue.edu.

VERSION
    1.0
"""

import sys
import benchmark as bm


def rda_by_hit_plot_2phase():
    """Plot rd signature for the benchmark given as input."""
    #=======================================================================
    # command line processing
    #=======================================================================
    if len(sys.argv) != 7:
        sys.stdout.write("Incorrect number of arguments. Program description:\n" 
                         + __doc__)
        sys.exit(1)
    benchmark = sys.argv[1]
    input_file = sys.argv[2]
    num_threads = int(sys.argv[3])
    offset = int(sys.argv[4])
    quantum_size = int(sys.argv[5])
    first_preferred_thread = int(sys.argv[6])
    stack_type = None
    new_bm = bm.Benchmark(benchmark, num_threads, stack_type)
    new_bm.read_rddata_from_file_2phase(input_file, num_threads, offset,
        quantum_size, first_preferred_thread)
    new_bm.plot_rd_profiles_by_hit_type()

    sys.stderr.write("my work is done here\n")


if __name__ == '__main__':
    rda_by_hit_plot_2phase()

